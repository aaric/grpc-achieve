buildscript {
    ext {
        lombokVersion = "4.1.6"
        junitPlatformVersion = "1.2.0"
        dependencyManagementVersion = "1.0.9.RELEASE"
        springBootVersion = "2.2.6.RELEASE"
        protobufVersion = "0.8.12"
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.aliyun.com/repository/public" }
    }

    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:$lombokVersion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:$protobufVersion"
    }
}

allprojects {
    group "com.incarcloud"
    version "0.2.0-SNAPSHOT"

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://repository.incarcloud.com/content/groups/public" }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "io.freefair.lombok"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "com.google.protobuf"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        compile "org.slf4j:slf4j-api"

        testCompile "org.junit.jupiter:junit-jupiter-api"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testCompile("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "junit", module: "junit"
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }

        developmentOnly "org.springframework.boot:spring-boot-devtools" //支持热部署依赖
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        }

        dependencies {
            dependencySet(group: "org.slf4j", version: "1.7.30") {
                entry "slf4j-api"
                entry "slf4j-simple"
            }

            dependency "org.flywaydb:flyway-core:5.2.4"

            dependency "org.apache.commons:commons-io:1.3.2"
            dependency "org.apache.commons:commons-lang3:3.9"

            dependency "com.google.guava:guava:28.2-jre"

            dependency "javax.annotation:javax.annotation-api:1.3.2"
            dependency "io.grpc:grpc-all:1.28.1"
        }
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    test {
        useJUnitPlatform()
    }

    task checkstyle(type: Checkstyle) {
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures true
        showViolations true
        source = fileTree("src")
        include "**/*.java"
        exclude "**/test/**"
        exclude "**/build/**"
        classpath = files()
    }

    task removeLombokConfig() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def lombokConfigFile = new File(subProjectPath, "lombok.config")
            if (lombokConfigFile.exists()) {
                lombokConfigFile.delete()
            }
        }
    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:3.11.4"
        }

        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:1.28.1"
            }
        }

        generatedFilesBaseDir = "src"

        generateProtoTasks {
            all()*.plugins {
                grpc {
                    setOutputSubDir "java"
                }
            }
        }
    }

    defaultTasks "assemble"
}
